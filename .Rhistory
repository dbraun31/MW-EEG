theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank())
pca <- prcomp(d[,mask], scale=TRUE)
# Summarize results
# Scree
importance <- summary(pca)$importance
result <- cbind(data.frame(metric = rownames(importance)[2:3]), importance[2:3,])
result %>%
gather(factor, loading, PC1:PC5) %>%
mutate(factor = gsub('[A-Za-z]', '', factor)) %>%
filter(metric=='Proportion of Variance') %>%
ggplot(aes(x = factor, y = loading, group = 1)) +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Variance Explained'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5))
ggsave('scripts/dim-reduction/scree_plot.png', height=800, width=800, units='px', dpi=120)
# Rotation
orange <- brewer_pal(type='div')(9)[2]
blue <- brewer_pal(type='div')(9)[8]
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3))) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank())
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3))) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank())
ggsave('scripts/dim-reduction/pca_result.png', height=800, width=800, dpi=120, units='px')
rm(list=ls())
library(tidyverse)
library(scales)
source('scripts/helpers/drop_suffix.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
og_rows <- nrow(d)
d <- d[complete.cases(d),  grep('*_response$', colnames(d), value=TRUE)]
colnames(d) <- drop_suffix(d)
percent_missing <- round((og_rows - nrow(d))/og_rows, 4) * 100
print(paste0(percent_missing, '% of the data was dropped due to missing observations on one or more variables'))
# Use dimensions used in past literature
mask <- c('past', 'fut', 'self', 'ppl', 'aff')
# Run PCA
pca <- prcomp(d[,mask], scale=TRUE)
# Summarize results
# Scree
importance <- summary(pca)$importance
result <- cbind(data.frame(metric = rownames(importance)[2:3]), importance[2:3,])
result %>%
gather(factor, loading, PC1:PC5) %>%
mutate(factor = gsub('[A-Za-z]', '', factor)) %>%
filter(metric=='Proportion of Variance') %>%
ggplot(aes(x = factor, y = loading, group = 1)) +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Variance Explained'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5))
ggsave('scripts/dim-reduction/scree_plot.png', height=800, width=800, units='px', dpi=120)
# Rotation
orange <- brewer_pal(type='div')(9)[2]
blue <- brewer_pal(type='div')(9)[8]
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3))) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank())
pca
importance
pca$sdev^2
result %>%
gather(factor, loading, PC1:PC5) %>%
head()
pca
result <- data.frame(factor = 1:(ncol(pca$rotation)), eigenvalue = pca$sdev^2)
result
result %>%
ggplot(aes(x = factor, y = eigenvalue, group = 1)) +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Eigenvalue'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5))
result %>%
ggplot(aes(x = factor, y = eigenvalue, group = 1)) +
geom_hline(yintercept=1, linetype='dotted') +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Eigenvalue'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5))
ggsave('scripts/dim-reduction/scree_plot.png', height=800, width=800, units='px', dpi=120)
q()
library(scales)
library(tidyverse)
rm(list=ls())
source('scripts/helpers/drop_suffix.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
# Average across subjects
d <- d[complete.cases(d), c('subject', 'run', grep('*_response$', colnames(d), value=TRUE))]
colnames(d)[3:(ncol(d))] <- drop_suffix(d[3:(ncol(d))])
d <- d %>%
gather(dimension, response, att:conf) %>%
group_by(subject, dimension) %>%
summarize(response = mean(response)) %>%
spread(dimension, response)
# Calculate the correlation matrix
correlation_matrix <- cor(d[,!colnames(d) %in% subject])
# Calculate the correlation matrix
correlation_matrix <- cor(d[,!colnames(d) %in% 'subject'])
correlation_matrix
# Visualize correlation matrix
# put significance markers on here at some point
high <- brewer_pal(type='div')(9)[2]
low <- brewer_pal(type='div')(9)[8]
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight)) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggsave('scripts/dim-reduction/correlation_matrix.png', height=800, width=800, units='px', dpi=100)
library(scales)
library(tidyverse)
rm(list=ls())
source('scripts/helpers/drop_suffix.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
# Average across subjects
d <- d[complete.cases(d), c('subject', 'run', grep('*_response$', colnames(d), value=TRUE))]
colnames(d)[3:(ncol(d))] <- drop_suffix(d[3:(ncol(d))])
d <- d %>%
gather(dimension, response, att:conf) %>%
group_by(subject, dimension) %>%
summarize(response = mean(response)) %>%
spread(dimension, response)
# Calculate the correlation matrix
correlation_matrix <- cor(d[,!colnames(d) %in% 'subject'])
# Visualize correlation matrix
# put significance markers on here at some point
high <- brewer_pal(type='div')(9)[2]
low <- brewer_pal(type='div')(9)[8]
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight)) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggsave('scripts/dim-reduction/correlation_matrix.png', height=1000, width=1000, units='px', dpi=100)
ggsave('scripts/dim-reduction/correlation_matrix.png', height=1000, width=1000, units='px', dpi=200)
ggsave('scripts/dim-reduction/correlation_matrix.png', height=1000, width=1000, units='px', dpi=150)
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight)) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=18))
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight)) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25))
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight)) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight), size = 25) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight), size = 15) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight), size = 12) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight), size = 8) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
correlation_matrix %>%
as.data.frame() %>%
mutate(var1 = names(.)) %>%
gather(var2, cor, aff:self) %>%
mutate(highlight = ifelse(var1 > var2, round(cor, 2), '')) %>%
ggplot(aes(x = var1, y = var2, fill = cor)) +
geom_tile() +
geom_text(aes(label=highlight), size = 7) +
scale_fill_gradient2(low=low, high=high, mid='white', midpoint=0, limits=c(-.8,.8)) +
labs(
x = '',
y = '',
fill = 'Correlation\nStrength'
) +
theme_bw() +
theme(axis.text.x = element_text(angle=45, hjust=1),
text = element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/correlation_matrix.png', height=720, width=1280, units='px', dpi=96)
rm(list=ls())
library(tidyverse)
library(scales)
source('scripts/helpers/drop_suffix.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
og_rows <- nrow(d)
d <- d[complete.cases(d),  grep('*_response$', colnames(d), value=TRUE)]
colnames(d) <- drop_suffix(d)
percent_missing <- round((og_rows - nrow(d))/og_rows, 4) * 100
print(paste0(percent_missing, '% of the data was dropped due to missing observations on one or more variables'))
# Use dimensions used in past literature
mask <- c('past', 'fut', 'self', 'ppl', 'aff')
# Run PCA
pca <- prcomp(d[,mask], scale=TRUE)
# Summarize results
# Scree
importance <- summary(pca)$importance
result <- data.frame(factor = 1:(ncol(pca$rotation)), eigenvalue = pca$sdev^2)
result %>%
ggplot(aes(x = factor, y = eigenvalue, group = 1)) +
geom_hline(yintercept=1, linetype='dotted') +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Eigenvalue'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5))
ggsave('scripts/dim-reduction/scree_plot.png', height=1000, width=1000, units='px', dpi=120)
result %>%
ggplot(aes(x = factor, y = eigenvalue, group = 1)) +
geom_hline(yintercept=1, linetype='dotted') +
geom_line(size = 1.5, color='steelblue') +
geom_point(size = 2.5) +
labs(
title = 'Scree plot',
x = 'Number of Factors',
y = 'Eigenvalue'
) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.ticks = element_blank(),
legend.position = c(.8, .5),
text=element_text(size = 25))
ggsave('scripts/dim-reduction/scree_plot.png', height=1000, width=1000, units='px', dpi=120)
# Rotation
orange <- brewer_pal(type='div')(9)[2]
blue <- brewer_pal(type='div')(9)[8]
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3))) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank())
ggsave('scripts/dim-reduction/pca_result.png', height=1000, width=1000, dpi=120, units='px')
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3))) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25))
ggsave('scripts/dim-reduction/pca_result.png', height=1000, width=1000, dpi=120, units='px')
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 7) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25))
ggsave('scripts/dim-reduction/pca_result.png', height=1000, width=1000, dpi=120, units='px')
pca$rotation %>%
as.data.frame(.) %>%
mutate(item = rownames(.)) %>%
select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 7) +
scale_fill_gradient2(low=blue, high=orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none')
ggsave('scripts/dim-reduction/pca_result.png', height=1000, width=1000, dpi=120, units='px')
