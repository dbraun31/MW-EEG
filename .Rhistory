d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 7) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
plot_rotation_subject <- function(subject_pcas, subjects) {
# Takes in subject pcas and subjects to plot
# Converts to df and plots faceted by subject
# Fixed at five items for now
d <- data.frame()
for (subject in subjects) {
rot <- data.frame(subject_pcas[[paste0('subject', subject)]])
rot$subject <- subject
rot$item <- rownames(rot)
d <- rbind(d, rot)
}
# Plot
orange <- brewer_pal(type='div')(9)[2]
blue <- brewer_pal(type='div')(9)[8]
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
}
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
mutate(subject = paste0('Subject ', subject)) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
subjects
subjects <- c(5, 3, 10)
d <- data.frame()
for (subject in subjects) {
rot <- data.frame(subject_pcas[[paste0('subject', subject)]])
rot$subject <- subject
rot$item <- rownames(rot)
d <- rbind(d, rot)
}
subject
rot <- data.frame(subject_pcas[[paste0('subject', subject)]])
rot
subject_pcas
subject_pcas[[3]]
subject_pcas[c(4:6)]
names(subject_pcas[c(4:6)])
plot_rotation_subject <- function(subject_pcas, subject_idxs) {
# Takes in subject pcas and subjects to plot
# Converts to df and plots faceted by subject
# Fixed at five items for now
d <- data.frame()
for (subject_idx in subject_idxs) {
rot <- data.frame(subject_pcas[[paste0('subject', subject_idx)]])
rot$subject <- subject_idx
rot$item <- rownames(rot)
d <- rbind(d, rot)
}
# Plot
orange <- brewer_pal(type='div')(9)[2]
blue <- brewer_pal(type='div')(9)[8]
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
mutate(subject = paste0('Subject ', subject)) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
}
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
d <- data.frame()
subject_idxs <- c(5, 3, 10)
for (subject_idx in subject_idxs) {
rot <- data.frame(subject_pcas[[paste0('subject', subject_idx)]])
rot$subject <- subject_idx
rot$item <- rownames(rot)
d <- rbind(d, rot)
}
rot <- data.frame(subject_pcas[[subject_idx]])
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC5) %>%
mutate(subject = paste0('Subject ', decode_subject(subject_pcas, subject))) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(5, 3, 10))
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
pca_data
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
pca_data
head(d)
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, c('subject', items)]
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
head(subject_pcas)
distance_matrix <- matrix(0, nrow=length(subject_pcas), ncol=length(subject_pcas))
for (i in 1:length(subject_pcas)) {
for (j in 1:length(subject_pcas)) {
# Frobenius norm of difference between two matrices
distance_matrix[i,j] <- norm(subject_pcas[[i]] - subject_pcas[[j]], type='F')
}
}
hc <- hclust(dist(distance_matrix))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(9, 4, 6))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(9, 4, 6))
d %>%
#select(item, PC1:PC3) %>%
gather(factor, loading, PC1:PC3) %>%
mutate(subject = subject) %>%
ggplot(aes(x = factor, y = item, fill = loading)) +
geom_tile() +
geom_text(aes(label=round(loading, 3)), size = 5) +
scale_fill_gradient2(low = blue, high = orange) +
labs(
x = 'Factor',
y = 'Thought Probe',
fill = 'Loading\nScore'
) +
facet_grid(subject~.) +
theme_bw() +
theme(axis.ticks = element_blank(),
panel.grid=element_blank(),
text=element_text(size=25),
legend.position='none',
strip.background = element_rect(fill=NA))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(9, 4, 6))
# Visualize similarities
plot_rotation_subject(subject_pcas, c(10, 8, 13))
# Normalize
d <- normalize_subject_item(d)
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, c('subject', items)]
# Normalize
d <- normalize_subject_item(d)
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
# Compute distance and cluster
distance_matrix <- matrix(0, nrow=length(subject_pcas), ncol=length(subject_pcas))
for (i in 1:length(subject_pcas)) {
for (j in 1:length(subject_pcas)) {
# Frobenius norm of difference between two matrices
distance_matrix[i,j] <- norm(subject_pcas[[i]] - subject_pcas[[j]], type='F')
}
}
hc <- hclust(dist(distance_matrix))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(10, 8, 13))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(6, 4, 7, 11))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(6, 4, 15, 16))
# Visualize similarities
plot_rotation_subject(subject_pcas, c(6, 4, 7, 11))
summary(hc)
str(hc)
rm(list=ls())
library(tidyverse)
source('scripts/helpers/normalize.r')
source('scripts/helpers/plot_rotation.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, c('subject', items)]
# Drop low confidence (< 75) responses
head(d)
rm(list=ls())
library(tidyverse)
source('scripts/helpers/normalize.r')
source('scripts/helpers/plot_rotation.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Drop low confidence (< 75) responses
head(d)
rm(list=ls())
library(tidyverse)
source('scripts/helpers/normalize.r')
source('scripts/helpers/plot_rotation.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Drop low confidence (< 75) responses
d <- d[d$conf > 75,]
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, c('subject', items)]
# Normalize
d <- normalize_subject_item(d)
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
# Compute distance and cluster
distance_matrix <- matrix(0, nrow=length(subject_pcas), ncol=length(subject_pcas))
for (i in 1:length(subject_pcas)) {
for (j in 1:length(subject_pcas)) {
# Frobenius norm of difference between two matrices
distance_matrix[i,j] <- norm(subject_pcas[[i]] - subject_pcas[[j]], type='F')
}
}
hc <- hclust(dist(distance_matrix))
plot(hc)
head(d)
rm(list=ls())
library(tidyverse)
source('scripts/helpers/normalize.r')
source('scripts/helpers/plot_rotation.r')
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('att', 'past', 'fut', 'self', 'ppl')
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, ]
# Drop low confidence (< 75) responses
d <- d[d$conf > 75, c('subject', items)]
# Normalize
d <- normalize_subject_item(d)
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
# Compute distance and cluster
distance_matrix <- matrix(0, nrow=length(subject_pcas), ncol=length(subject_pcas))
for (i in 1:length(subject_pcas)) {
for (j in 1:length(subject_pcas)) {
# Frobenius norm of difference between two matrices
distance_matrix[i,j] <- norm(subject_pcas[[i]] - subject_pcas[[j]], type='F')
}
}
hc <- hclust(dist(distance_matrix))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 10, 12, 14))
d <- read.csv('data/behavioral_data/MW_EEG_behavioral.csv')
items <- c('eng', 'mvmt', 'delib', 'image', 'ling')
# Keep only subjects with 50 observations
subject_mask <- d %>%
group_by(subject) %>%
summarize(count = n()) %>%
filter(count >= 50) %>%
pull(subject)
d <- d[d$subject %in% subject_mask, ]
# Drop low confidence (< 75) responses
d <- d[d$conf > 75, c('subject', items)]
# Normalize
d <- normalize_subject_item(d)
# Run PCAs
subject_pcas <- list()
for (subject in d$subject) {
pca_data <- d[d$subject==subject, colnames(d) != 'subject']
subject_pcas[[paste0('subject', subject)]] <- prcomp(pca_data)$rotation[,1:3]
}
# Compute distance and cluster
distance_matrix <- matrix(0, nrow=length(subject_pcas), ncol=length(subject_pcas))
for (i in 1:length(subject_pcas)) {
for (j in 1:length(subject_pcas)) {
# Frobenius norm of difference between two matrices
distance_matrix[i,j] <- norm(subject_pcas[[i]] - subject_pcas[[j]], type='F')
}
}
hc <- hclust(dist(distance_matrix))
plot(hc)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 4, 5, 8))
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 4, 5, 8))
ggsave('figures/pca_subjects_rotation.png', height=1000, width=1000, unit='px', dpi=150)
source("~/Dropbox/post_doc/professional/projects/MW_EEG/scripts/helpers/plot_rotation.r")
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 4, 5, 8))
ggsave('figures/pca_subjects_rotation.png', height=1000, width=1000, unit='px', dpi=150)
install.packages('ggraph')
install.packages('ggforce')
install.packages('ggraph')
library(ggraph)
# Cluster and plot dendrogram
hc <- hclust(dist(distance_matrix))
dendrogram <- as.dendrogram(hc)
# Create a plot using ggraph
g <- ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 2) +  # Add labels
theme_minimal()  # Customize the theme
g
# Create a plot using ggraph
g <- ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 2) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 20))
g
# Create a plot using ggraph
g <- ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 15) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12))
g
# Create a plot using ggraph
g <- ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 8) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12))
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 8) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12))
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 6) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12))
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 6) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12),
axis.text = element_blank())
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 4, 5, 8))
ggsave('figures/pca_subjects_dendro.png', height=1000, width=1000, unit='px', dpi=150)
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 6) +  # Add labels
theme_minimal() +  # Customize the theme
theme(text = element_text(size = 12),
axis.text = element_blank())
ggsave('figures/pca_subjects_dendro.png', height=1000, width=1000, unit='px', dpi=150)
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 6) +  # Add labels
theme_bw() +  # Customize the theme
theme(text = element_text(size = 12),
axis.text = element_blank())
ggsave('figures/pca_subjects_dendro.png', height=1000, width=1000, unit='px', dpi=150)
# Create a plot using ggraph
ggraph(dendrogram, layout = "dendrogram") +
geom_edge_elbow() +  # Customize edge appearance
geom_node_text(aes(label = label), hjust = 0, size = 6) +  # Add labels
theme_bw() +  # Customize the theme
theme(text = element_text(size = 12),
axis.text = element_blank(),
panel.grid = element_blank())
ggsave('figures/pca_subjects_dendro.png', height=1000, width=1000, unit='px', dpi=150)
# Visualize similarities
plot_rotation_subject(subject_pcas, c(3, 4, 5, 8))
ggsave('figures/pca_subjects_rotation.png', height=1000, width=1000, unit='px', dpi=150)
