matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
get_matches(rmat_gt)
character(0)
character(0) == character(0)
length(result[['PC6']])
length(get_matches(rmat_gt[['PC6']])
length(get_matches(rmat_gt)[['PC6']])
'' == ''
result = get_matches(rmat_gt)
result[['PC1']][[1]]
lapply(result, function(x) x[[1]])
sapply(result, function(x) x[[1]])
result[['PC1']][1]
sapply(result, function(x) x[1])
rmat
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
matches
candidates
result
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
matches
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
matches
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
#matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
get_matches(rmat)
rmat
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat <- rmat$rotation
get_matches(rmat)
result <- get_matches(rmat)
result$PC5
result$PC6
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- unlist(sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x)))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
get_matches(rmat)
rmat
result$PC6
result <- get_matches(rmat)
result
result$PC3
help(sapply)
data <- rmat[,'PC1']
data
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
candidates
matched_items
matched_items <- c()
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
matches
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
matches
typeof(matches)
class(matches)
matches <- c(matches, 'att')
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, '', x))
matches
matches[2]
matches <- c(matches, character(0))
matches
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, 'none', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
result <- get_matches(rmat)
result
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
print(matches)
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, 'none', x))
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
result <- get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- sapply(matches, FUN=function(x) ifelse(length(x)==0, 'none', x))
print(matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
result <- get_matches(rmat)
x <- c(character(0))
length(x)
length(x)==0
x
sapply(x, FUN=function(i) ifelse(length(i) == 0, 'none', i))
ifelse(length(x) == 0, '', x)
x <- c(x, 'sd')
sapply(x, FUN=function(i) ifelse(length(i) == 0, 'none', i))
c('sd', character(0))
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
print(matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
get_matches(rmat)
rmat <- prcomp(d[d$subject==5, ])$rotation
rmat
rmat <- prcomp(d[d$subject==5, mask])$rotation
rmat
get_matches(rmat)
data <- rmat[,2]
data
abs(data)
data[abs(data) > .5]
matches
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
print(matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
print(matches)
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
count <- 0
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
count <- count + 1
print(paste0('Iteration ', count))
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
print(matches)
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
colnames(rmat)
rmat[,colnames(rmat)[3]]
rmat[,colnames(rmat)[2]]
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
count <- 0
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
count <- count + 1
print(paste0('Iteration ', count))
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
print(candidates)
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
count <- 0
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
count <- count + 1
print(paste0('Iteration ', count))
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
print(matches)
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
# Start with content-related items
mask <- c('past', 'fut', 'self', 'ppl', 'aff', 'att')
rmat
get_matches(rmat)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
count <- 0
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
count <- count + 1
print(paste0('Iteration ', count))
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
matches <- ifelse(length(matches) == 0, '', matches)
print(matches)
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
matches <- c('past', 'fut')
ifelse(length(matches)== 0, '', matches)
length(matches)
get_matches <- function(rmat) {
# Takes in a rotation matrix
# Returns a list of matches (abs > .5) for all PCs
result <- list()
matched_items <- c()
count <- 0
# Iterate over columns in the rotation matrix
for (col in colnames(rmat)) {
count <- count + 1
print(paste0('Iteration ', count))
# Pull out data from a column
data <- rmat[,col]
# Get the names of items with absolute score > .5
candidates <- names(data[abs(data) > .5])
# Ensure those items aren't already matched
matches <- candidates[!candidates %in% matched_items]
# Ensure elements aren't empty
if (length(matches) == 0) {
matches <- ''
}
# Update previously matched items and results
matched_items <- c(matched_items, matches)
result[[col]] <- matches
}
return(result)
}
rmat
get_matches(rmat)
